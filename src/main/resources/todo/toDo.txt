 public void demo() {

        MobileCommand.postC("wedwed").getMethod();
        MobileCommand.getC("edwedw").getMethod();
        Map.Entry<String, Map<String, ?>> a = MobileCommand.hideKeyboardCommand("");
        System.out.println(a.getKey());
        System.out.println(a.getValue());


        AndroidRemoveApplicationOptions removeApplication = new AndroidRemoveApplicationOptions()
                .withTimeout(Duration.of(100, ChronoUnit.SECONDS))
                .withKeepDataDisabled();
        Map<String, Object> removeInstall = removeApplication.build();
        removeInstall.values().forEach(e -> System.out.println(e.toString()));

        AndroidTerminateApplicationOptions terminateApplication = new AndroidTerminateApplicationOptions()
                .withTimeout(Duration.of(100, ChronoUnit.SECONDS));
        Map<String, Object> terminateApp = terminateApplication.build();
        terminateApp.values().forEach(e -> System.out.println(e.toString()));

        ConnectionState state = new ConnectionState(100);
        long getBitMask = state.getBitMask();
        boolean isAirplaneModeEnabled = state.isAirplaneModeEnabled();
        boolean isDataEnabled = state.isDataEnabled();
        boolean isWiFiEnabled = state.isWiFiEnabled();

        ConnectionState builder = new ConnectionStateBuilder()
                .withAirplaneModeDisabled()
                .withDataDisabled()
                .withWiFiEnabled()
                .withAirplaneModeEnabled()
                .withDataEnabled()
                .withWiFiDisabled()
                .build();

        long getBitMaskB = builder.getBitMask();
        boolean isAirplaneModeEnabledB = builder.isAirplaneModeEnabled();
        boolean isDataEnabledB = builder.isDataEnabled();
        boolean isWiFiEnabledB = builder.isWiFiEnabled();

        Activity activity = new Activity("","");
        activity.isStopApp();
        activity.setAppWaitPackage("")
                .setAppWaitPackage("")
                .setIntentAction("")
                .setIntentFlags("")
                .setOptionalIntentArguments("");

        activity.getAppActivity();
        activity.getAppWaitActivity();
        activity.getAppPackage();
        activity.getIntentAction();
        activity.getIntentFlags();
        activity.getOptionalIntentArguments();

        AndroidBatteryInfo info = new AndroidBatteryInfo(Map.of("",""));
        switch (info.getState()) {
            case FULL:
                break;
            case UNKNOWN:
                break;
            case CHARGING:
                break;
            case DISCHARGING:
                break;
            case NOT_CHARGING:
                break;
        }

        Map.Entry<String, Map<String, ?>> command = null;
        command = AndroidMobileCommandHelper.currentActivityCommand();
        command = AndroidMobileCommandHelper.openNotificationsCommand();
        command = AndroidMobileCommandHelper.currentPackageCommand();
        command = AndroidMobileCommandHelper.fingerPrintCommand(3);
        command = AndroidMobileCommandHelper.powerACCommand(PowerACState.OFF);
        command = AndroidMobileCommandHelper.getSupportedPerformanceDataTypesCommand();

        Capabilities capabilities = new DesiredCapabilities();
        AndroidOptions options = new AndroidOptions(capabilities);
        boolean doesAutoWebview = options.doesAutoWebview();
        boolean doesClearSystemFiles = options.doesClearSystemFiles();
        boolean doesEventTimings = options.doesEventTimings();
        boolean doesNoReset = options.doesNoReset();
        boolean doesFullReset = options.doesFullReset();
        boolean doesPrintPageSourceOnFindFailure = options.doesPrintPageSourceOnFindFailure();


        AndroidStartScreenRecordingOptions screenRecordingOptions = new AndroidStartScreenRecordingOptions()
                .withUploadOptions(ScreenRecordingUploadOptions.uploadOptions())
                .enableBugReport()
                .withBitRate(4)
                .withVideoSize("");
        screenRecordingOptions.build();

        AndroidStopScreenRecordingOptions screenStopRecordingOptions = new AndroidStopScreenRecordingOptions()
                .withUploadOptions(ScreenRecordingUploadOptions.uploadOptions());
        screenStopRecordingOptions.build();

        AndroidTouchAction androidTouchAction = new AndroidTouchAction(null);
        //androidTouchAction...

        AuthenticatesByFinger authenticatesByFinger = new AuthenticatesByFinger() {
            @Override
            public Response execute(String driverCommand, Map<String, ?> parameters) {

                return null;
            }

            @Override
            public Response execute(String driverCommand) {
                return null;
            }
        };

        authenticatesByFinger.fingerPrint(1);
        ScriptOptions scriptOptions = new ScriptOptions()
                .withScriptType(ScriptType.WEBDRIVERIO)
                .withTimeout(111);
        scriptOptions.build();

        BatteryInfo batteryInfo = new AndroidBatteryInfo(null);
        batteryInfo.getLevel();
        batteryInfo.getState();

       // String newAppiumPrefix = CapabilityHelpers.APPIUM_PREFIX;
       // CapabilityHelpers.getCapability();
        JsonToMobileElementConverter converter = new JsonToMobileElementConverter(null);
        ByAll byAll = new ByAll(new By[]{By.xpath(""), By.xpath("")});
        byAll.findElement(null).click();

        AppiumW3CHttpCommandCodec appiumW3CHttpCommandCodec = new AppiumW3CHttpCommandCodec();

        MobileOptions<?> mobileOptions = new MobileOptions<>();
        mobileOptions.setAutoWebview();
        mobileOptions.setEnablePerformanceLogging();
        mobileOptions.doesAutoWebview();
        mobileOptions.doesNoReset();
        mobileOptions.getApp();
        mobileOptions.isEnablePerformanceLogging();

        AppiumServiceBuilder appiumServiceBuilder = new AppiumServiceBuilder()
                .usingPort(1)
                .withIPAddress("")
                .withArgument(AndroidServerFlag.SUPPRESS_ADB_KILL_SERVER)
                .withArgument(GeneralServerFlag.ALLOW_INSECURE)
                .withArgument(GeneralServerFlag.ASYNC_TRACE)
                .withArgument(IOSServerFlag.BACK_END_RETRIES)
                .withStartUpTimeOut(100, TimeUnit.SECONDS)
                .withCapabilities(null)
                .withLogFile(new File(""));
        appiumServiceBuilder.build();

        AppiumExecutionMethod appiumExecution = new AppiumExecutionMethod(null);
        appiumExecution.execute("", null);

        IOSPressOptions iosPressOptions = new IOSPressOptions()
                .withPressure(444)
                .withElement(null)
                .withPressure(0.0);
        iosPressOptions.build();

        IOSMobileCommandHelper.longPressKeyCodeCommand(5);
    }



    public void aVoid(MobileCommand command, String key) {

        MobileCommand.postC("wedwed").getMethod();
        MobileCommand.getC("edwedw").getMethod();
        Map.Entry<String, Map<String, ?>> a = MobileCommand.hideKeyboardCommand("");
        System.out.println(a.getKey());
        System.out.println(a.getValue());

        AndroidInstallApplicationOptions androidInstall = new AndroidInstallApplicationOptions()
                .withAllowTestPackagesDisabled()
                .withGrantPermissionsDisabled()
                .withTimeout(Duration.of(100, ChronoUnit.SECONDS))
                .withAllowTestPackagesEnabled()
                .withUseSdcardEnabled();
        Map<String, Object> installBuild = androidInstall.build();
        installBuild.values().forEach(e -> System.out.println(e.toString()));

        AndroidRemoveApplicationOptions removeApplication = new AndroidRemoveApplicationOptions()
                .withTimeout(Duration.of(100, ChronoUnit.SECONDS))
                .withKeepDataDisabled();
        Map<String, Object> removeInstall = removeApplication.build();
        removeInstall.values().forEach(e -> System.out.println(e.toString()));

        AndroidTerminateApplicationOptions terminateApplication = new AndroidTerminateApplicationOptions()
                .withTimeout(Duration.of(100, ChronoUnit.SECONDS));
        Map<String, Object> terminateApp = terminateApplication.build();
        terminateApp.values().forEach(e -> System.out.println(e.toString()));

        ConnectionState state = new ConnectionState(100);
        long getBitMask = state.getBitMask();
        boolean isAirplaneModeEnabled = state.isAirplaneModeEnabled();
        boolean isDataEnabled = state.isDataEnabled();
        boolean isWiFiEnabled = state.isWiFiEnabled();


        ConnectionState builder = new ConnectionStateBuilder()
                .withAirplaneModeDisabled()
                .withDataDisabled()
                .withWiFiEnabled()
                .withAirplaneModeEnabled()
                .withDataEnabled()
                .withWiFiDisabled()
                .build();

        long getBitMaskB = builder.getBitMask();
        boolean isAirplaneModeEnabledB = builder.isAirplaneModeEnabled();
        boolean isDataEnabledB = builder.isDataEnabled();
        boolean isWiFiEnabledB = builder.isWiFiEnabled();





    }